library(tidyr)
library(ggplot2)
library(caret)
Used_raw = read.csv('CAR DETAILS.CSV')
summary(Used_raw)
ggplot(Used_raw, aes(fuel, selling_price)) +
geom_boxplot()
ggplot(Used_raw, aes(year)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1990:2020) +
theme(axis.text.x = element_text(angle = 90))
ggplot(Used_raw, aes(year, selling_price)) +
geom_point()
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000)
ggplot(Used_raw, aes(km_driven, selling_price)) +
geom_point(alpha=0.1)
ggplot(Used_raw, aes(seller_type, selling_price)) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(transmission, selling_price)) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(owner, selling_price)) +
geom_bar(aes(fill = seller_type), stat="identity", position = 'dodge') +
theme(axis.text.x = element_text(angle = 30))
Used_numeric = data.matrix(Used_raw)
Used_numeric = subset(Used_numeric, select = -c(name))
cor(Used_numeric)
detach("package:caret", unload = TRUE)
library(caret)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric, p=.75,
list = FALSE,
times = 1)
train_idx = Used_numeric[trainIndex]
library(readxl)
library(dplyr)
library(stringi)
library(tidyr)
library(ggplot2)
library(lattice)
library(caret)
Used_raw = read.csv('CAR DETAILS.CSV')
summary(Used_raw)
ggplot(Used_raw, aes(fuel, selling_price)) +
geom_boxplot()
ggplot(Used_raw, aes(year)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1990:2020) +
theme(axis.text.x = element_text(angle = 90))
ggplot(Used_raw, aes(year, selling_price)) +
geom_point()
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000)
ggplot(Used_raw, aes(km_driven, selling_price)) +
geom_point(alpha=0.1)
ggplot(Used_raw, aes(seller_type, selling_price)) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(transmission, selling_price)) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(owner, selling_price)) +
geom_bar(aes(fill = seller_type), stat="identity", position = 'dodge') +
theme(axis.text.x = element_text(angle = 30))
Used_numeric = data.matrix(Used_raw)
Used_numeric = subset(Used_numeric, select = -c(name))
cor(Used_numeric)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric, p=.75,
list = FALSE,
times = 1)
train_idx = Used_numeric[trainIndex]
View(trainIndex)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric, p=.75,
list = FALSE,
times = 1)
train_idx = Used_numeric[trainIndex,]
set.seed(71)
trainIndex <- createDataPartition(Used_numeric$year, p=.75,
list = FALSE,
times = 1)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric[year], p=.75,
list = FALSE,
times = 1)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric['year'], p=.75,
list = FALSE,
times = 1)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric(seeling_price), p=.75,
list = FALSE,
times = 1)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric(selling_price), p=.75,
list = FALSE,
times = 1)
Used_numeric
Used_numeric[year]
Used_numeric.year
Used_numeric(year)
Used_numeric['year']
Used_numeric[,'selling_price']
set.seed(71)
trainIndex <- createDataPartition(Used_numeric[,'selling_price'], p=.75,
list = FALSE,
times = 1)
train_idx = Used_numeric[trainIndex,]
View(train_idx)
set.seed(71)
trainIndex <- createDataPartition(Used_numeric[,'selling_price'], p=.75,
list = FALSE,
times = 1)
train_idx = Used_numeric[trainIndex,]
test_idx = Used_numeric[-trainIndex,]
train_idx[,-c('selling_price')]
train_idx[,-('selling_price')]
train_idx[,-'selling_price']
train_idx[,'selling_price']
train_idx[,-'selling_price']
train_idx[,'selling_price']
subset(train_idx, select = 'selling_price'))
subset(train_idx, select = 'selling_price')
subset(train_idx, select = -c('selling_price'))
subset(train_idx, select = -('selling_price'))
subset(train_idx, select = -c('selling_price'))
subset(train_idx, select = !c('selling_price'))
subset(train_idx, select = c('selling_price'))
subset(train_idx, select = 'selling_price')
train_idx[-c(2)]
subset(train_idx, select = 'selling_price')
train_idx[,-c(2)]
subset(train_idx, select = 'selling_price')
library(readxl)
library(tidyr)
library(ggplot2)
library(lattice)
library(caret)
library(fastDummies)
library(car)
library(dplyr)
library(tidyverse)
Used_raw = read.csv('Car details v3.CSV')
Used_raw(1:5,)
Used_raw = read.csv('Car details v3.CSV')
Used_raw[1:5,]
View(Used_raw)
View(Used_raw)
library(readxl)
library(stringr)
library(tidyr)
library(ggplot2)
library(lattice)
library(caret)
library(fastDummies)
library(car)
library(dplyr)
library(tidyverse)
word(Used_raw$name, 1)
Used_raw$Mfr <- word(Used_raw$name, 1)
Used_numeric <- dummy_cols(Used_raw, select_columns = c('Mfr', 'fuel', 'seller_type', 'transmission', 'owner'),
remove_selected_columns = TRUE,
remove_first_dummy = TRUE)
cor(Used_numeric)
View(Used_numeric)
View(Used_numeric)
Used_raw = read.csv('Car details v3.CSV')
Used_raw[1:5,]
summary(Used_raw)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw %>% mutate(mil_km = parse_number(mileage),
eng_cc = parse_number(engine),
max_pow = parse_number(max_power)
)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw[, -c(1,9,10,11,12)]
table(Used_raw$km_driven)
table(Used_raw$mil_km)
Used_raw <- filter(Used_raw, !km_driven == 1,
!km_driven > 1000000,
!mil_km == 0,
!mil_km == 42)
Used_raw$Mfr <- word(Used_raw$name, 1)
View(Used_raw)
Used_raw = read.csv('Car details v3.CSV')
Used_raw[1:5,]
summary(Used_raw)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw %>% mutate(mil_km = parse_number(mileage),
eng_cc = parse_number(engine),
max_pow = parse_number(max_power)
)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw[, -c(9,10,11,12)]
table(Used_raw$km_driven)
table(Used_raw$mil_km)
Used_raw <- filter(Used_raw, !km_driven == 1,
!km_driven > 1000000,
!mil_km == 0,
!mil_km == 42)
Used_raw$Mfr <- word(Used_raw$name, 1)
View(Used_raw)
Used_raw$Mfr <- word(Used_raw$name, 1)
Used_raw <- Used_raw[, -c('name')]
Used_raw$Mfr <- word(Used_raw$name, 1)
Used_raw <- Used_raw[, -c(['name'])]
View(Used_raw)
Used_raw$Mfr <- word(Used_raw$name, 1)
Used_raw <- Used_raw[, -c(1)]
View(Used_raw)
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000)
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram()
Used_numeric <- dummy_cols(Used_raw, select_columns = c('Mfr', 'fuel', 'seller_type', 'transmission', 'owner'),
remove_selected_columns = TRUE,
remove_first_dummy = TRUE)
cor(Used_numeric)
lm_selling_price <- lm(log(selling_price) ~ . , data = Used_numeric)
summary(lm_selling_price)
plot(lm_selling_price)
data.frame(vif(lm_selling_price))
Used_raw = read.csv('Car details v3.CSV')
Used_raw[1:5,]
summary(Used_raw)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw %>% mutate(mil_km = parse_number(mileage),
eng_cc = parse_number(engine),
max_pow = parse_number(max_power)
)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw[, -c(1,9,10,11,12)]
table(Used_raw$km_driven)
table(Used_raw$mil_km)
Used_raw <- filter(Used_raw, !km_driven == 1,
!km_driven > 1000000,
!mil_km == 0,
!mil_km == 42)
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000)
Used_numeric <- dummy_cols(Used_raw, select_columns = c('Mfr', 'fuel', 'seller_type', 'transmission', 'owner'),
remove_selected_columns = TRUE,
remove_first_dummy = TRUE)
Used_numeric <- dummy_cols(Used_raw, select_columns = c('fuel', 'seller_type', 'transmission', 'owner'),
remove_selected_columns = TRUE,
remove_first_dummy = TRUE)
cor(Used_numeric)
lm_selling_price <- lm(log(selling_price) ~ . , data = Used_numeric)
summary(lm_selling_price)
plot(lm_selling_price)
data.frame(vif(lm_selling_price))
Used_nofuel <- Used_numeric[,-c(6,8,9,10)] #also no eng_cc
lm_selling_price2 <- lm(log(selling_price) ~ . , data = Used_nofuel)
summary(lm_selling_price2)
plot(lm_selling_price2)
data.frame(vif(lm_selling_price2))
Used_final <- Used_nofuel[,-c(3,8)]
lm_selling_price3 <- lm(log(selling_price) ~ . , data = Used_final)
summary(lm_selling_price3)
AIC(lm_selling_price,
lm_selling_price2,
lm_selling_price3)
BIC(lm_selling_price,
lm_selling_price2,
lm_selling_price3)
AIC(lm_selling_price,
lm_selling_price2,
lm_selling_price3)
BIC(lm_selling_price,
lm_selling_price2,
lm_selling_price3)
set.seed(71)
trainIndex <- createDataPartition(Used_final[,'selling_price'], p=.75,
list = FALSE,
times = 1)
train_idx <- Used_final[trainIndex,]
test_idx <- Used_final[-trainIndex,]
train_model <- lm(log(selling_price) ~ ., data = train_idx)
summary(train_model)
x_test <- test_idx[,-2]
test_idx$predict <- predict(train_model, x_test)
sqrt(sum(log(test_idx$selling_price)-test_idx$predict)^2/nrow(test_idx))
plot(log(test_idx$selling_price)-test_idx$predict)
test_idx$diff <- log(test_idx$selling_price)-test_idx$predict
ggplot(test_idx, aes(diff)) +
geom_histogram(binwidth = 0.2)
PRESS <- function(linear.model) {
#' calculate the predictive residuals
pr <- residuals(linear.model)/(1-lm.influence(linear.model)$hat)
#' calculate the PRESS
PRESS <- sum(pr^2)
return(PRESS)
}
pred_r_squared <- function(linear.model) {
#' Use anova() to get the sum of squares for the linear model
lm.anova <- anova(linear.model)
#' Calculate the total sum of squares
tss <- sum(lm.anova$'Sum Sq')
# Calculate the predictive R^2
pred.r.squared <- 1-PRESS(linear.model)/(tss)
return(pred.r.squared)
}
pred_r_squared(train_model)
data.frame(summary(Used_raw))
summary(Used_raw)
unique(Used_raw)
unique(Used_raw['year'])
unique(Used_raw['fuel'])
Used_raw = read.csv('Car details v3.CSV')
Used_raw[1:5,]
summary(Used_raw)
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000, colour = 'black', fill = 'white')
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000, colour = 'black', fill = 'white') +
labs(title = 'selling price')
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000, colour = 'black', fill = 'white') +
labs(title = 'selling price',
xlabel = 'selling price(INR)')
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000, colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 1, colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 0.25, colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white') +
labs(title = 'log_selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white') +
labs(title = 'log_selling price') +
xlab('log of selling price')
ggplot(Used_raw, aes(fuel, log(selling_price), fill=fuel)) +
geom_boxplot() +
labs(title = "fuel vs selling price",) +
ylabel('log of selling price')
ggplot(Used_raw, aes(fuel, log(selling_price), fill=fuel)) +
geom_boxplot() +
labs(title = "fuel vs selling price",) +
ylab('log of selling price')
ggplot(Used_raw, aes(year,log(selling_price))) +
geom_point() +
labs(title = 'year vs selling price')
ggplot(Used_raw, aes(year,log(selling_price))) +
geom_point() +
labs(title = 'year vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(km_driven, log(selling_price), col('red'))) +
geom_point(alpha=0.2)
ggplot(Used_raw, aes(km_driven, log(selling_price), colours('yellow')) +
geom_point(alpha=0.2)
ggplot(Used_raw, aes(km_driven, log(selling_price)) +
geom_point(alpha=0.2)
ggplot(Used_raw, aes(km_driven, log(selling_price))) +
geom_point(alpha=0.2)
Used_raw = read.csv('Car details v3.CSV')
Used_raw[1:5,]
summary(Used_raw)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw %>% mutate(mil_km = parse_number(mileage),
eng_cc = parse_number(engine),
max_pow = parse_number(max_power)
)
Used_raw <- drop_na(Used_raw)
Used_raw <- Used_raw[, -c(1,9,10,11,12)]
table(Used_raw$km_driven)
table(Used_raw$mil_km)
Used_raw <- filter(Used_raw, !km_driven == 1,
!km_driven > 1000000,
!mil_km == 0,
!mil_km == 42)
ggplot(Used_raw, aes(selling_price)) +
geom_histogram(binwidth = 500000, colour = 'black', fill = 'white') +
labs(title = 'selling price') +
xlab('selling price(INR)')
ggplot(Used_raw, aes(log(selling_price))) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white') +
labs(title = 'log_selling price') +
xlab('log of selling price')
ggplot(Used_raw, aes(fuel, log(selling_price), fill=fuel)) +
geom_boxplot() +
labs(title = "fuel vs selling price",) +
ylab('log of selling price')
ggplot(Used_raw, aes(year)) +
geom_histogram(binwidth = 1, colour = 'black', fill = 'white') +
labs(title = 'histogram of year') +
scale_x_continuous(breaks = 1990:2020) +
theme(axis.text.x = element_text(angle = 90))
ggplot(Used_raw, aes(year,log(selling_price))) +
geom_point() +
labs(title = 'year vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(km_driven, log(selling_price))) +
geom_point(alpha=0.2)
ggplot(Used_raw, aes(km_driven, log(selling_price))) +
geom_point(alpha=0.2) +
labs(title = 'km_driven vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = sell_type) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = seller_type) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = seller_type)) +
geom_bar(stat="identity")
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = seller_type)) +
geom_bar(stat="identity") +
labs(title = 'seller type vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = seller_type)) +
geom_box(stat="identity") +
labs(title = 'seller type vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = seller_type)) +
geom_box() +
labs(title = 'seller type vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(seller_type, log(selling_price), fill = seller_type)) +
geom_boxplot() +
labs(title = 'seller type vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(transmission, log(selling_price))) +
geom_boxplot(stat="identity")
ggplot(Used_raw, aes(transmission, log(selling_price))) +
geom_boxplot()
ggplot(Used_raw, aes(transmission, log(selling_price), fill = transmission)) +
geom_boxplot()
ggplot(Used_raw, aes(transmission, log(selling_price), fill = transmission)) +
geom_boxplot() +
labs(title = 'transmission vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(owner, log(selling_price))) +
geom_bar(aes(fill = seller_type), stat="identity", position = 'dodge') +
theme(axis.text.x = element_text(angle = 30)) +
labs(title = 'owner vs selling price')
ggplot(Used_raw, aes(mil_km, log(selling_price), fill = transmission)) +
geom_boxplot() +
labs(title = 'transmission vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(mil_km, log(selling_price), fill = transmission)) +
geom_point() +
labs(title = 'transmission vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(mil_km, log(selling_price))) +
geom_point() +
labs(title = 'transmission vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(mil_km, log(selling_price))) +
geom_point() +
labs(title = 'mileage vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(eng_cc, log(selling_price))) +
geom_point() +
labs(title = 'mileage vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(eng_cc, log(selling_price))) +
geom_point() +
labs(title = 'engine cc vs selling price') +
ylab('log of selling price')
ggplot(Used_raw, aes(max_pow, log(selling_price))) +
geom_point() +
labs(title = 'max power vs selling price') +
ylab('log of selling price')
x_test <- test_idx[,-2]
test_idx$predict <- predict(train_model, x_test)
sqrt(sum(log(test_idx$selling_price)-test_idx$predict)^2/nrow(test_idx))
plot(log(test_idx$selling_price)-test_idx$predict) +
labs(title = 'test vs predict')
x_test <- test_idx[,-2]
test_idx$predict <- predict(train_model, x_test)
sqrt(sum(log(test_idx$selling_price)-test_idx$predict)^2/nrow(test_idx))
plot(log(test_idx$selling_price)-test_idx$predict)
x_test <- test_idx[,-2]
test_idx$predict <- predict(train_model, x_test)
sqrt(sum(log(test_idx$selling_price)-test_idx$predict)^2/nrow(test_idx))
plot(log(test_idx$selling_price)-test_idx$predict) +
ylab('test')
x_test <- test_idx[,-2]
test_idx$predict <- predict(train_model, x_test)
sqrt(sum(log(test_idx$selling_price)-test_idx$predict)^2/nrow(test_idx))
plot(log(test_idx$selling_price)-test_idx$predict)
test_idx$diff <- log(test_idx$selling_price)-test_idx$predict
ggplot(test_idx, aes(diff)) +
geom_histogram(binwidth = 0.5, colour = 'black', fill = 'white') +
labs(title = 'predict vs test')
test_idx$diff <- log(test_idx$selling_price)-test_idx$predict
ggplot(test_idx, aes(diff)) +
geom_histogram(binwidth = 0.2, colour = 'black', fill = 'white') +
labs(title = 'predict vs test')
test_idx$diff <- log(test_idx$selling_price)-test_idx$predict
ggplot(test_idx, aes(diff)) +
geom_histogram(binwidth = 0.2, colour = 'black', fill = 'white') +
labs(title = 'predict vs test') +
xlab('difference')
